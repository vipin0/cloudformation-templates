AWSTemplateFormatVersion: 2010-09-09
Description: Stack to deploy wordpress using RDS,EC2, ASG, ALB.
# paramters to be passed

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC id of your existing VPC.
    ConstraintDescription: Must be the vpc id of your existing VPC
  
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet ids in your vpc.
    ConstraintDescription: must be atleast two subnets in your selected vpc and in different azs.
  
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key name for SSH connection.
    ConstraintDescription: Must be an existing key name.
  
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    ConstraintDescription: must be a valid EC2 instance type.
  
  DBInstanceType:
    Description: Database instance class
    Type: String
    Default: db.t3.small
    AllowedValues:
      - db.t3.small
      - db.t3.micro
      - db.t3.medium
    ConstraintDescription: must be a valid database instance type.
  
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: "1"
    MaxLength: "64"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  
  DBUser:
    NoEcho: "true"
    Description: The WordPress database admin account username
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  
  DBPassword:
    NoEcho: "true"
    Description: The WordPress database admin account password
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  
  MultiAZDatabase:
    Default: "false"
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
    Type: String
    AllowedValues:
      - "true"
      - "false"
    ConstraintDescription: must be either true or false.
  
  WebServerCapacity:
    Default: "1"
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: "1"
    MaxValue: "5"
    ConstraintDescription: must be between 1 and 5 EC2 instances.

  DBAllocatedStorage:
    Default: "5"
    Description: The size of the database (Gb)
    Type: Number
    MinValue: "5"
    MaxValue: "1024"
    ConstraintDescription: must be between 5 and 1024Gb.

# region instance mapping
Mappings:
  AWSRegionToAMI:
    us-east-1:
      hvm64: ami-0ed9277fb7eb570c9
    us-east-2:
      hvm64: ami-002068ed284fb165b

# resources
Resources:
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - Ref: ALBSecurityGroup
      Subnets:
        Ref: Subnets

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: "/wp-admin/install.php"
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "30"

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: "80"
      Protocol: HTTP

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SecurityGroup allow HTTP access from Anywhere.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: ALBSecurityGroup

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 to ALB + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Fn::Select:
              - 0
              - Fn::GetAtt:
                  - ApplicationLoadBalancer
                  - SecurityGroups
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: SSHLocation
      VpcId:
        Ref: VpcId

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Ref: Subnets
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: "1"
      MaxSize: "5"
      DesiredCapacity:
        Ref: WebServerCapacity
      TargetGroupARNs:
        - Ref: ALBTargetGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: "1"
        MaxBatchSize: "1"
        # PauseTime: PT15M
        WaitOnResourceSignals: "true"

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Fn::FindInMap:
          - AWSRegionToAMI
          - Ref: AWS::Region
          - hvm64
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      KeyName:
        Ref: KeyName
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash -xe"
              - "sudo yum update -y"
              - "sudo yum install -y httpd mysql mysqladmin"
              - "sudo amazon-linux-extras install php7.4 -y "
              - "wget https://wordpress.org/latest.tar.gz -P /tmp"
              - "tar -xzf /tmp/latest.tar.gz -C /tmp"
              - "sudo mv /tmp/wordpress/* /var/www/html"
              - "sudo systemctl start httpd"
              - "sudo systemctl enable httpd"
              - "sudo cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php"
              - Fn::Join:
                  - ""
                  - - sudo sed -i "s/'database_name_here'/'
                    - Ref: DBName
                    - '''/g" /var/www/html/wp-config.php'

              - Fn::Join:
                  - ""
                  - - sudo sed -i "s/'username_here'/'
                    - Ref: DBUser
                    - '''/g" /var/www/html/wp-config.php'

              - Fn::Join:
                  - ""
                  - - sudo sed -i "s/'password_here'/'
                    - Ref: DBPassword
                    - '''/g" /var/www/html/wp-config.php'
              - Fn::Join:
                  - ""
                  - - sudo sed -i "s/'localhost'/'
                    - Fn::GetAtt:
                        - DBInstance
                        - Endpoint.Address
                    - '''/g" /var/www/html/wp-config.php'
              # setting proper permissions
              - "sudo chown apache:apache  -R *"
              - 'sudo find . -type d -exec chmod 755 {} \;'
              - 'sudo find . -type f -exec chmod 644 {} \;'
              # - 'sudo chmod 500 /var/www/html/wp-config.php'

  # ----------- database --------------
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Ref: WebServerSecurityGroup
      VpcId:
        Ref: VpcId

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName:
        Ref: DBName
      Engine: MySQL
      MultiAZ:
        Ref: MultiAZDatabase
      MasterUsername:
        Ref: DBUser
      MasterUserPassword:
        Ref: DBPassword
      DBInstanceClass:
        Ref: DBInstanceType
      AllocatedStorage:
        Ref: DBAllocatedStorage
      VPCSecurityGroups:
        - Fn::GetAtt:
            - DBEC2SecurityGroup
            - GroupId
Outputs:
  WebsiteURL:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - ApplicationLoadBalancer
              - DNSName
    Description: Wordpress Website